// Generated by dts-bundle-generator v8.0.1

import { Document } from 'mongoose';
import winston from 'winston';

export type LogType = "info" | "warn" | "error" | "fatal";
export declare class Logger {
	logsPath: string;
	loggers: Record<LogType, winston.Logger>;
	constructor(logsPath: string);
	log(message: string, type?: LogType): void;
}
export declare enum PunishmentType {
	Warn = 0,
	Mute = 1,
	Kick = 2,
	Ban = 3
}
export declare function PunishmentTypeToName(type: PunishmentType): "Warn" | "Mute" | "Kick" | "Ban";
export interface IDBPunishment extends DBPunishment, Document {
}
export declare const PunishmentConfigSchema: mongoose.Schema<IDBPunishment, mongoose.Model<IDBPunishment, any, any, any, mongoose.Document<unknown, any, IDBPunishment> & Omit<IDBPunishment & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBPunishment, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBPunishment>> & Omit<mongoose.FlatRecord<IDBPunishment> & {
	_id: mongoose.Types.ObjectId;
}, never>>;
export declare enum TicketType {
	Private = -1,
	General = 0,
	MemberReport = 1,
	ModReport = 2,
	HeadModReport = 3
}
export interface IDBTicket extends DBTicket, Document {
}
export declare const TicketConfigSchema: mongoose.Schema<IDBTicket, mongoose.Model<IDBTicket, any, any, any, mongoose.Document<unknown, any, IDBTicket> & Omit<IDBTicket & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBTicket, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBTicket>> & Omit<mongoose.FlatRecord<IDBTicket> & {
	_id: mongoose.Types.ObjectId;
}, never>>;
export interface DBUser {
	userId: string;
	firstjoined: number;
	lastjoined: number;
	inguild: boolean;
	muted: boolean;
	banned: boolean;
	mod: number;
	ticketban: boolean;
}
export interface DBPunishment {
	punishmentId: string;
	user: string;
	mod: string;
	type: PunishmentType;
	reason: string;
	at: number;
	until: number;
	active: boolean;
	automated: boolean;
	appealed: boolean;
}
export interface DBGiveaway {
	giveawayId: string;
	message: string;
	channel: string;
	host: string;
	name: string;
	start: number;
	end: number;
	ended: boolean;
	winners: number;
	filter: GiveawayFilter;
}
export interface GiveawayFilter {
	nitro: boolean;
}
export interface DBLevel {
	userId: string;
	xp: number;
}
export interface DBTicket {
	ticketId: string;
	channel: string;
	creator: string;
	mod: string;
	modlevel: number;
	waitingfor: number;
	type: TicketType;
	users: Map<string, string>;
	closed: boolean;
	closedat: number;
}
export interface DBTictactoe {
	user: string;
	gamesPlayed: number;
	gamesWon: number;
	gamesLost: number;
	elo: number;
}
export interface IDBGiveaway extends DBGiveaway, Document {
}
export declare const GiveawayConfigSchema: mongoose.Schema<IDBGiveaway, mongoose.Model<IDBGiveaway, any, any, any, mongoose.Document<unknown, any, IDBGiveaway> & Omit<IDBGiveaway & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBGiveaway, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBGiveaway>> & Omit<mongoose.FlatRecord<IDBGiveaway> & {
	_id: mongoose.Types.ObjectId;
}, never>>;
export interface IDBLevel extends DBLevel, Document {
}
export declare const LevelConfigSchema: mongoose.Schema<IDBLevel, mongoose.Model<IDBLevel, any, any, any, mongoose.Document<unknown, any, IDBLevel> & Omit<IDBLevel & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBLevel, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBLevel>> & Omit<mongoose.FlatRecord<IDBLevel> & {
	_id: mongoose.Types.ObjectId;
}, never>>;
export interface IDBTictactoe extends DBTictactoe, Document {
}
export declare const TictactoeConfigSchema: mongoose.Schema<IDBTictactoe, mongoose.Model<IDBTictactoe, any, any, any, mongoose.Document<unknown, any, IDBTictactoe> & Omit<IDBTictactoe & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBTictactoe, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBTictactoe>> & Omit<mongoose.FlatRecord<IDBTictactoe> & {
	_id: mongoose.Types.ObjectId;
}, never>>;
export interface IDBUser extends DBUser, Document {
}
export declare const UserConfigSchema: mongoose.Schema<IDBUser, mongoose.Model<IDBUser, any, any, any, mongoose.Document<unknown, any, IDBUser> & Omit<IDBUser & {
	_id: mongoose.Types.ObjectId;
}, never>, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, IDBUser, mongoose.Document<unknown, {}, mongoose.FlatRecord<IDBUser>> & Omit<mongoose.FlatRecord<IDBUser> & {
	_id: mongoose.Types.ObjectId;
}, never>>;

export {};
import mongoose from 'mongoose';
